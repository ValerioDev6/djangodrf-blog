# test_railway_complete.py - Test completo para Railway deployment
import requests
import json
from datetime import datetime, timedelta
import sys

# üöÄ CONFIGURACI√ìN RAILWAY
RAILWAY_URL = "https://web-production-8d7cb.up.railway.app"
session = requests.Session()

def print_separator(title):
    """Imprimir separador bonito"""
    print("\n" + "="*80)
    print(f"üîç {title}")
    print("="*80)

def print_data_preview(data, title, max_items=3):
    """Mostrar preview de datos de forma bonita"""
    print(f"\nüìã {title}")
    print("-" * 60)
    
    if not data:
        print("‚ùå No hay datos disponibles")
        return
    
    if isinstance(data, list):
        print(f"Total elementos: {len(data)}")
        items_to_show = min(len(data), max_items)
        
        for i, item in enumerate(data[:items_to_show]):
            print(f"\n[{i+1}] {json.dumps(item, indent=2, ensure_ascii=False)}")
        
        if len(data) > max_items:
            print(f"\n... y {len(data) - max_items} elementos m√°s")
    else:
        print(json.dumps(data, indent=2, ensure_ascii=False))

def test_railway_connectivity():
    """Test b√°sico de conectividad a Railway"""
    print_separator("CONECTIVIDAD RAILWAY")
    
    try:
        # Test b√°sico de la ra√≠z
        print("üåê Probando conectividad b√°sica...")
        response = requests.get(RAILWAY_URL, timeout=10)
        print(f"   Status ra√≠z: {response.status_code}")
        print(f"   Headers: {dict(response.headers)}")
        
        # Test del health endpoint
        print("\nüîç Probando health check...")
        health_response = requests.get(f"{RAILWAY_URL}/api/reports/health", timeout=10)
        print(f"   Health status: {health_response.status_code}")
        
        if health_response.status_code == 200:
            health_data = health_response.json()
            print_data_preview(health_data, "Health Check Response")
            return True
        else:
            print(f"   Health response: {health_response.text[:200]}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"üí• Error de conectividad: {str(e)}")
        return False

def test_railway_login():
    """Test espec√≠fico de login en Railway"""
    print_separator("LOGIN RAILWAY")
    
    # Headers espec√≠ficos para Railway
    headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'User-Agent': 'Railway-Test-Client/1.0',
        # Sin Origin espec√≠fico para evitar CORS
    }
    
    login_data = {
        "username": "Auren", 
        "password": "Grupo4uren"
    }
    
    print("üîê Intentando login en Railway...")
    print(f"   URL: {RAILWAY_URL}/api/auth/signin")
    print(f"   Headers: {headers}")
    print(f"   Data: {login_data}")
    
    try:
        response = session.post(
            f"{RAILWAY_URL}/api/auth/signin", 
            json=login_data, 
            headers=headers,
            timeout=15
        )
        
        print(f"\nüìä RESULTADO LOGIN:")
        print(f"   Status: {response.status_code}")
        print(f"   Headers response: {dict(response.headers)}")
        
        # Analizar cookies
        cookies = session.cookies.get_dict()
        print(f"   Cookies obtenidas: {list(cookies.keys())}")
        
        if response.status_code == 200:
            print("   ‚úÖ LOGIN EXITOSO")
            
            # Mostrar detalles de cookies
            for cookie in session.cookies:
                print(f"   Cookie '{cookie.name}': domain='{cookie.domain}', path='{cookie.path}', secure={cookie.secure}")
            
            try:
                response_data = response.json()
                print_data_preview(response_data, "Login Response")
            except:
                print("   Respuesta no es JSON")
                
            return cookies.get('access_token')
            
        else:
            print(f"   ‚ùå LOGIN FALL√ì: {response.status_code}")
            print(f"   Response: {response.text}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"üí• Error en login: {str(e)}")
        return None

def test_railway_endpoint(endpoint, description, token=None, params=None, method='GET'):
    """Test gen√©rico de endpoint en Railway"""
    print(f"\nüß™ Testing: {description}")
    print(f"   Endpoint: {endpoint}")
    
    url = f"{RAILWAY_URL}{endpoint}"
    headers = {
        'Accept': 'application/json',
        'User-Agent': 'Railway-Test-Client/1.0'
    }
    
    # Si tenemos token, agregarlo como cookie manual
    if token:
        headers['Cookie'] = f'access_token={token}'
        print(f"   üîë Usando token: {token[:20]}...")
    
    try:
        if method == 'GET':
            response = session.get(url, headers=headers, params=params, timeout=15)
        else:
            response = session.post(url, headers=headers, json=params, timeout=15)
        
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ √âXITO")
            try:
                data = response.json()
                return data
            except:
                return {"raw_response": response.text[:500]}
        elif response.status_code == 401:
            print("   üîí ERROR AUTH - Token inv√°lido o expirado")
            return None
        elif response.status_code == 404:
            print("   üö´ ERROR 404 - Endpoint no encontrado")
            return None
        else:
            print(f"   ‚ùå ERROR {response.status_code}")
            print(f"   Response: {response.text[:200]}")
            return None
            
    except requests.exceptions.RequestException as e:
        print(f"   üí• EXCEPCI√ìN: {str(e)}")
        return None

def test_railway_cors():
    """Test espec√≠fico de CORS para Railway"""
    print_separator("TEST CORS RAILWAY")
    
    # Simular request desde frontend local
    cors_headers = {
        'Origin': 'http://localhost:3000',
        'Access-Control-Request-Method': 'POST',
        'Access-Control-Request-Headers': 'Content-Type',
    }
    
    print("üåê Probando CORS preflight...")
    try:
        response = requests.options(f"{RAILWAY_URL}/api/auth/signin", headers=cors_headers)
        print(f"   OPTIONS status: {response.status_code}")
        print(f"   CORS headers: {dict(response.headers)}")
        
        # Verificar headers CORS importantes
        cors_origin = response.headers.get('Access-Control-Allow-Origin')
        cors_credentials = response.headers.get('Access-Control-Allow-Credentials')
        cors_methods = response.headers.get('Access-Control-Allow-Methods')
        
        print(f"\nüìã AN√ÅLISIS CORS:")
        print(f"   Allow-Origin: {cors_origin}")
        print(f"   Allow-Credentials: {cors_credentials}")
        print(f"   Allow-Methods: {cors_methods}")
        
        if cors_origin and ('*' in cors_origin or 'localhost' in cors_origin):
            print("   ‚úÖ CORS Allow-Origin configurado correctamente")
        else:
            print("   ‚ùå CORS Allow-Origin problem√°tico")
            
        return response.status_code in [200, 204]
        
    except Exception as e:
        print(f"üí• Error CORS: {str(e)}")
        return False

def run_railway_complete_test():
    """Ejecutar test completo de Railway"""
    
    print("üöÄ INICIANDO TEST COMPLETO DE RAILWAY")
    print(f"Railway URL: {RAILWAY_URL}")
    print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # 1. Test de conectividad b√°sica
    if not test_railway_connectivity():
        print("‚ùå Fall√≥ conectividad b√°sica - abortando")
        return
    
    # 2. Test CORS
    test_railway_cors()
    
    # 3. Test de login
    token = test_railway_login()
    if not token:
        print("‚ùå No se pudo obtener token - continuando con tests p√∫blicos")
    
    # 4. Test de endpoints p√∫blicos
    print_separator("ENDPOINTS P√öBLICOS")
    
    # Health check
    health_data = test_railway_endpoint('/api/reports/health', 'Health Check')
    if health_data:
        print_data_preview(health_data, "Health Response")
    
    # Debug general
    debug_data = test_railway_endpoint('/api/reports/debug', 'Debug Info')
    if debug_data:
        print_data_preview(debug_data, "Debug Info")
    
    # 5. Test de endpoints con auth (si tenemos token)
    if token:
        print_separator("ENDPOINTS CON AUTENTICACI√ìN")
        
        # Test connection
        conn_data = test_railway_endpoint('/api/reports/test-connection', 'Test Connection', token=token)
        if conn_data:
            print_data_preview(conn_data, "Connection Test")
        
        # Zonales
        zonales_data = test_railway_endpoint('/api/reports/zonales', 'Zonales', token=token)
        if zonales_data and zonales_data.get('success'):
            zonales_list = zonales_data.get('data', [])
            print_data_preview(zonales_list, "Zonales Disponibles")
        
        # Supervisores
        supervisores_data = test_railway_endpoint('/api/reports/supervisores', 'Supervisores', token=token)
        if supervisores_data and supervisores_data.get('success'):
            supervisores_list = supervisores_data.get('data', [])
            print_data_preview(supervisores_list, "Supervisores Disponibles")
        
        # Reporte con fecha actual
        today = datetime.now().strftime('%Y-%m-%d')
        resumen_data = test_railway_endpoint(
            '/api/reports/vendedores-ventas', 
            f'Resumen Vendedores {today}', 
            token=token,
            params={'fecha': today}
        )
        if resumen_data and resumen_data.get('success'):
            resumen_list = resumen_data.get('data', [])
            print_data_preview(resumen_list, f"Resumen {today}")
        
        # Debug auth
        debug_auth_data = test_railway_endpoint('/api/reports/debug-auth', 'Debug Auth', token=token)
        if debug_auth_data:
            print_data_preview(debug_auth_data, "Debug Auth")
    
    # 6. DIAGN√ìSTICO FRONTEND
    print_separator("DIAGN√ìSTICO PARA FRONTEND")
    
    print("üîß PROBLEMAS DETECTADOS:")
    print("\n1. ‚ùå URL INCORRECTA EN FRONTEND:")
    print("   Tu frontend usa: https://web-production-8d7cb.up.railway.app:3000/")
    print("   Debe ser:       https://web-production-8d7cb.up.railway.app/")
    print("   Railway NO usa puertos personalizados")
    
    print("\n2. üîß CORRECCI√ìN EN NEXT.JS:")
    print("   En tu .env.local:")
    print("   NEXT_PUBLIC_API_URL=https://web-production-8d7cb.up.railway.app")
    print("   (SIN puerto 3000)")
    
    print("\n3. üìã VERIFICAR CONFIGURACI√ìN:")
    print("   - Rewrites en next.config.ts apuntan correctamente")
    print("   - CORS est√° configurado para localhost")
    print("   - JWT cookies tienen path='/' y secure=true")
    
    print_separator("RESUMEN FINAL")
    print("‚úÖ Test de Railway completado")
    print("üîß ACCI√ìN REQUERIDA: Corregir URL en frontend (quitar :3000)")
    print("üìù El backend de Railway parece funcionar correctamente")

def main():
    """Funci√≥n principal"""
    try:
        run_railway_complete_test()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  Test interrumpido por usuario")
    except Exception as e:
        print(f"\nüí• Error inesperado: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()